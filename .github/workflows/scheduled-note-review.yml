name: Scheduled Note Review

on:
  schedule:
    # Run daily at 12:00 PM UTC (adjust timezone as needed)
    - cron: '0 12 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      max_notes:
        description: 'Maximum notes to include in email'
        required: false
        default: '5'
        type: string
      force_send:
        description: 'Force send even if recently sent'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  note-review:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pyproject.toml
        
    - name: Create necessary directories
      run: |
        mkdir -p data
        mkdir -p logs
        
    - name: Decrypt and setup credentials
      env:
        MASTER_PASSWORD: ${{ secrets.MASTER_PASSWORD }}
        EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        EMAIL_APP_PASSWORD: ${{ secrets.EMAIL_APP_PASSWORD }}
        NOTES_DIRECTORY: ${{ secrets.NOTES_DIRECTORY }}
      run: |
        python scripts/setup_github_credentials.py
        
    - name: Run note review job
      env:
        MAX_NOTES: ${{ github.event.inputs.max_notes || '5' }}
        FORCE_SEND: ${{ github.event.inputs.force_send || 'false' }}
      run: |
        python scripts/run_scheduled_job.py \
          --max-notes "$MAX_NOTES" \
          --force-send "$FORCE_SEND" \
          --log-level INFO
          
    - name: Archive logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: execution-logs
        path: logs/
        retention-days: 30
        
    - name: Backup database
      if: success()
      run: |
        python scripts/backup_database.py --upload-to-artifacts
        
    - name: Upload database backup
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: database-backup
        path: data/backups/
        retention-days: 90

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const issue_body = `
          ## Scheduled Note Review Failed
          
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}
          **Timestamp:** ${new Date().toISOString()}
          **Branch:** ${{ github.ref_name }}
          
          The scheduled note review job failed. Please check the logs for details.
          
          [View Run Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          // Only create issue if this is a scheduled run (not manual)
          if ('${{ github.event_name }}' === 'schedule') {
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[ALERT] Scheduled Note Review Failed - ${new Date().toISOString().split('T')[0]}`,
              body: issue_body,
              labels: ['bug', 'automation', 'high-priority']
            });
          }

  health-check:
    runs-on: ubuntu-latest
    needs: note-review
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Run health check
      run: |
        python scripts/health_check.py --output-format github
        
    - name: Update status badge
      if: success()
      run: |
        echo "![Status](https://img.shields.io/badge/note--review-passing-green)" > status.md
        
    - name: Update status badge (failed)
      if: failure()  
      run: |
        echo "![Status](https://img.shields.io/badge/note--review-failing-red)" > status.md 